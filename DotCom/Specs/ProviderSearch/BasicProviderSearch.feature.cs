// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DotCom.Specs.ProviderSearch
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Basic Provider Search")]
    public partial class BasicProviderSearchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BasicProviderSearch.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Basic Provider Search", "\tAs a current or prospective HMSA member\r\n\tI want basic search results for provid" +
                    "ers\r\n\tSo that I don\'t have to browse the entire provider directory to choose a n" +
                    "ew provider", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Degree",
                        "Specialty"});
            table1.AddRow(new string[] {
                        "Aaron K Nada",
                        "MD",
                        "Nephrology"});
#line 8
 testRunner.Given("I have this provider:", ((string)(null)), table1, "Given ");
#line 11
 testRunner.And("the provider \'Aaron K Nada\' accepts \'HMSA Akamai Advantage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Line 1",
                        "Line 2",
                        "City",
                        "ST",
                        "Zip",
                        "Phone"});
            table2.AddRow(new string[] {
                        "1520 Liliha St",
                        "Suite 601",
                        "Honolulu",
                        "HI",
                        "96817",
                        "(808) 523-0445"});
            table2.AddRow(new string[] {
                        "98-211 Pali Momi St",
                        "Suite 320",
                        "Aiea",
                        "HI",
                        "96701",
                        "(808) 523-0445"});
            table2.AddRow(new string[] {
                        "3-3295 Kuhio Hwy",
                        "",
                        "Lihue",
                        "HI",
                        "96766",
                        "(808) 245-8874"});
#line 12
 testRunner.And("the provider \'Aaron K Nada\' has the following locations:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Perform a provider search by navigating from the home page and validate first res" +
            "ult")]
        public virtual void PerformAProviderSearchByNavigatingFromTheHomePageAndValidateFirstResult()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform a provider search by navigating from the home page and validate first res" +
                    "ult", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 20
 testRunner.Given("I navigate to the home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.And("I select Find a Doctor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.When("I search for \'nephrology\' with this health plan: \'HMSA Akamai Advantage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("I see my search query is \'nephrology\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.And("I see my plan is \'HMSA Akamai Advantage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Specialty",
                        "Line 1",
                        "City",
                        "ST",
                        "Zip",
                        "Phone"});
            table3.AddRow(new string[] {
                        "Aaron K Nada MD",
                        "Nephrology",
                        "4643B Waimea Canyon Dr",
                        "Waimea",
                        "HI",
                        "96796",
                        "(808) 338-8311"});
#line 25
 testRunner.And("I see these results:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Link to a map of the providers address")]
        public virtual void LinkToAMapOfTheProvidersAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link to a map of the providers address", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 31
 testRunner.Given("I search for \'nephrology\' with this health plan: \'HMSA Akamai Advantage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Specialty",
                        "Line 1",
                        "City",
                        "ST",
                        "Zip",
                        "Phone"});
            table4.AddRow(new string[] {
                        "Aaron K Nada MD",
                        "Nephrology",
                        "4643B Waimea Canyon Dr",
                        "Waimea",
                        "HI",
                        "96796",
                        "(808) 338-8311"});
#line 32
 testRunner.And("the first result is:", ((string)(null)), table4, "And ");
#line 35
 testRunner.When("I select Map on the first result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Address"});
            table5.AddRow(new string[] {
                        "1520 Liliha St Suite 601, Honolulu HI, 98617"});
#line 36
 testRunner.Then("I see a Google Maps page in a separate window for this address:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
